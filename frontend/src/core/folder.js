// üìÅ frontend/src/folder.js

import { updateFolderPaginationUI } from "./ui.js";
import {
  getRootFolder,
  getFolderCache,
  setFolderCache,
  
  
} from "./storage.js";
import { preloadThumbnails } from "./preload.js";
import { renderFolderCard } from "../components/folderCard.js";

export const state = {
  currentPath: "",
  allFolders: [],
};
let folderPage = 0;
const foldersPerPage = 20;
let totalFolders = 0; // üÜï T·ªïng s·ªë folder th·ª±c t·∫ø kh√¥ng b·ªã slice

/**
 * üìÇ Load folder t·ª´ API ho·∫∑c cache + hi·ªÉn th·ªã th∆∞ m·ª•c / ·∫£nh
 * @param {string} path
 * @param {number} page
 */
export function loadFolder(path = "", page = 0) {
  const rootFolder = getRootFolder();
  if (!rootFolder) return;

  state.currentPath = path;
  folderPage = page;

  document.getElementById("loading-overlay")?.classList.remove("hidden");

  const readerBtn = document.getElementById("readerModeButton");
  if (readerBtn) readerBtn.remove();

  const cached = getFolderCache(rootFolder, path);
  if (cached) {
    renderFromData(cached);
    document.getElementById("loading-overlay")?.classList.add("hidden");
    return;
  }

  fetch(
    `/api/folder-cache?mode=path&root=${encodeURIComponent(
      rootFolder
    )}&path=${encodeURIComponent(path)}`
  )
    .then((res) => res.json())
    .then((data) => {
      setFolderCache(rootFolder, path, data);
      renderFromData(data);
    })
    .catch((err) => {
      console.error("‚ùå L·ªói khi load folder:", err);
      alert("üö´ L·ªói khi t·∫£i th∆∞ m·ª•c, vui l√≤ng th·ª≠ l·∫°i!");
    })
    .finally(() => {
      document.getElementById("loading-overlay")?.classList.add("hidden");
    });
}

/**
 * üÜï Load danh s√°ch allFoldersList
 */
// export async function ensureAllFoldersList() {
//   const root = getRootFolder();
//   if (!root) return [];

//   let list = getAllFoldersList(root);
//   if (list) return list;

//   try {
//     const res = await fetch(
//       `/api/folder-cache?mode=folders&root=${encodeURIComponent(root)}`
//     );
//     list = await res.json();
//     setAllFoldersList(root, list);
//     return list;
//   } catch (err) {
//     console.error("‚ùå L·ªói fetch allFoldersList:", err);
//     return [];
//   }
// }

/**
 * üß± Render d·ªØ li·ªáu folder ho·∫∑c reader t·ª´ cache ho·∫∑c API
 * @param {object} data
 */
function renderFromData(data) {
  console.log("üì¶ Data render:", data); // debug
  const app = document.getElementById("app");
  app.innerHTML = "";

  if (data.type === "folder") {
    document.body.classList.remove("reader-mode");
    document.getElementById("main-footer")?.classList.remove("hidden");
    document.getElementById("reader-footer")?.classList.add("hidden");

    state.allFolders = [];

    if (data.images && data.images.length > 0) {
      const parts = state.currentPath.split("/");
      const folderName = parts[parts.length - 1] || "Xem ·∫£nh";

      state.allFolders.push({
        name: folderName,
        path: state.currentPath + "/__self__",
        thumbnail: data.images[0],
        isSelfReader: true,
        images: data.images,
        hasImages: true, // ‚úÖ Duy nh·∫•t ch·ªó n√†y c√≥ th·ªÉ check ƒë∆∞·ª£c
      });
    }

    state.allFolders = state.allFolders.concat(data.folders);

    preloadThumbnails(state.allFolders);

    // üÜï Ghi l·∫°i t·ªïng s·ªë folders th·ª±c t·∫ø
    totalFolders = state.allFolders.length;

    // üÜï Slice ph√¢n trang ch·ªâ ƒë√∫ng trang c·∫ßn render
    const pagedFolders = state.allFolders.slice(
      folderPage * foldersPerPage,
      (folderPage + 1) * foldersPerPage
    );

    renderFolderGrid(pagedFolders);

    // üÜï update ƒë√∫ng ph√¢n trang: d√πng t·ªïng s·ªë folders
    updateFolderPaginationUI(folderPage, totalFolders, foldersPerPage);
  } else if (data.type === "reader") {
    const encoded = encodeURIComponent(state.currentPath);
    window.location.href = `/reader.html?path=${encoded}`;
  }
}

/**
 * üìÇ Render danh s√°ch folder d∆∞·ªõi d·∫°ng l∆∞·ªõi (grid layout)
 * @param {Array} folders - Danh s√°ch folder c√≥ thumbnail
 */
export function renderFolderGrid(folders) {
  // üéØ L·∫•y th·∫ª ch√≠nh (v√πng hi·ªÉn th·ªã) v√† reset n·ªôi dung c≈©
  const app = document.getElementById("app");
  app.innerHTML = "";

  // üì¶ T·∫°o section ch√≠nh cho ph·∫ßn grid, g√°n class "grid"
  const section = document.createElement("section");
  section.className = "folder-section grid";

  // üìå Header cho section: ch·ª©a ti√™u ƒë·ªÅ v√† ch·ª©c nƒÉng back (n·∫øu c√≥)
  const header = document.createElement("div");
  header.className = "folder-section-header";

  // üè∑Ô∏è T·∫°o th·∫ª ti√™u ƒë·ªÅ
  const title = document.createElement("h3");
  title.className = "folder-section-title";

  // üß† X√°c ƒë·ªãnh t√™n folder hi·ªán t·∫°i d·ª±a tr√™n path
  const pathParts = state.currentPath.split("/").filter(Boolean); // lo·∫°i b·ªè chu·ªói r·ªóng
  const currentName = pathParts[pathParts.length - 1]; // t√™n folder hi·ªán t·∫°i

  // üñãÔ∏è G√°n n·ªôi dung ti√™u ƒë·ªÅ: n·∫øu ·ªü th∆∞ m·ª•c g·ªëc th√¨ ghi "Th∆∞ m·ª•c", c√≤n l·∫°i l√† t√™n folder
  title.textContent =
    pathParts.length === 0 ? "üìÇ Th∆∞ m·ª•c" : `üìÅ ${currentName}`;

  // üîô N·∫øu ƒëang trong th∆∞ m·ª•c con: cho ph√©p click ƒë·ªÉ quay l·∫°i th∆∞ m·ª•c cha
  if (pathParts.length > 0) {
    title.style.cursor = "pointer";
    title.title = "Click ƒë·ªÉ quay v·ªÅ th∆∞ m·ª•c cha";

    title.onclick = () => {
      const parentPath = pathParts.slice(0, -1).join("/"); // c·∫Øt b·ªè t√™n folder hi·ªán t·∫°i
      loadFolder(parentPath); // t·∫£i l·∫°i folder cha
    };
    // ‚úÖ N·∫øu t√™n d√†i ‚Üí c·∫Øt b·ªõt, hi·ªÉn th·ªã "...", gi·ªØ full name trong title
    title.style.maxWidth = "100%";
    title.style.overflow = "hidden";
    title.style.textOverflow = "ellipsis";
    title.style.whiteSpace = "nowrap";
  }

  // üß± G·∫Øn ti√™u ƒë·ªÅ v√†o header, r·ªìi header v√†o section
  header.appendChild(title);
  section.appendChild(header);

  // üóÇÔ∏è T·∫°o th·∫ª div d√πng ƒë·ªÉ ch·ª©a c√°c folder d∆∞·ªõi d·∫°ng grid
  const grid = document.createElement("div");
  grid.className = "grid"; // CSS s·∫Ω chia c·ªôt t·ª± ƒë·ªông

  // üß© T·∫°o t·ª´ng card folder v√† th√™m v√†o grid
  folders.forEach((f) => {
    const card = renderFolderCard(f, true); // true = hi·ªÉn th·ªã l∆∞·ª£t xem
    grid.appendChild(card);
  });

  // üß± G·∫Øn grid v√†o section ch√≠nh, r·ªìi render v√†o v√πng app
  section.appendChild(grid);
  app.appendChild(section);
}
