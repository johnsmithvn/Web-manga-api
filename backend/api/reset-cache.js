// üìÅ backend/api/reset-cache.js
const express = require("express");
const router = express.Router();
const db = require("../utils/db");
const { scanFolderRecursive } = require("../utils/cache-scan");

/**
 * üîÅ X·ª≠ l√Ω theo mode:
 * - mode=delete ‚ûú Xo√° DB
 * - mode=scan   ‚ûú Scan v√† th√™m v√†o DB (kh√¥ng x√≥a)
 * - mode=reset  ‚ûú Xo√° + Scan l·∫°i
 * Query: /api/reset-cache?root=1&mode=scan
 */
router.delete("/reset-cache", (req, res) => {
  const root = req.query.root;
  const mode = req.query.mode;

  if (!root || !mode)
    return res.status(400).json({ error: "Thi·∫øu root ho·∫∑c mode" });

  try {
    // ‚úÖ N·∫øu thi·∫øu c·ªôt updatedAt (DB c≈©) th√¨ th√™m v√†o
    try {
      db.prepare(`ALTER TABLE folders ADD COLUMN updatedAt INTEGER`).run();
      console.log("‚ûï Th√™m c·ªôt updatedAt v√†o b·∫£ng folders");
    } catch (e) {
      if (!e.message.includes("duplicate column name")) throw e;
    }
    if (mode === "delete") {
      db.prepare("DELETE FROM folders WHERE root = ?").run(root);
      console.log(`üóëÔ∏è ƒê√£ xo√° to√†n b·ªô folder cache c·ªßa root: ${root}`);
      return res.json({ success: true, message: "Xo√° DB th√†nh c√¥ng" });
    }

    if (mode === "reset") {
      db.prepare("DELETE FROM folders WHERE root = ?").run(root);
      scanFolderRecursive(dbkey,root);
      console.log(`üîÅ Reset cache: xo√° + scan l·∫°i cho root: ${root}`);
      return res.json({ success: true, message: "Reset DB th√†nh c√¥ng" });
    }

    return res.status(400).json({ error: "Sai mode" });
  } catch (err) {
    console.error("‚ùå L·ªói reset-cache:", err);
    res.status(500).json({ error: "L·ªói server" });
  }
});

module.exports = router;
